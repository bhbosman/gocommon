// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocommon/Services/IFxService (interfaces: IFxServices)

// Package IFxService is a generated GoMock package.
package IFxService

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFxServices is a mock of IFxServices interface.
type MockIFxServices struct {
	ctrl     *gomock.Controller
	recorder *MockIFxServicesMockRecorder
}

// MockIFxServicesMockRecorder is the mock recorder for MockIFxServices.
type MockIFxServicesMockRecorder struct {
	mock *MockIFxServices
}

// NewMockIFxServices creates a new mock instance.
func NewMockIFxServices(ctrl *gomock.Controller) *MockIFxServices {
	mock := &MockIFxServices{ctrl: ctrl}
	mock.recorder = &MockIFxServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFxServices) EXPECT() *MockIFxServicesMockRecorder {
	return m.recorder
}

// OnStart mocks base method.
func (m *MockIFxServices) OnStart(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart.
func (mr *MockIFxServicesMockRecorder) OnStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockIFxServices)(nil).OnStart), arg0)
}

// OnStop mocks base method.
func (m *MockIFxServices) OnStop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStop indicates an expected call of OnStop.
func (mr *MockIFxServicesMockRecorder) OnStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockIFxServices)(nil).OnStop), arg0)
}

// ServiceName mocks base method.
func (m *MockIFxServices) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockIFxServicesMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockIFxServices)(nil).ServiceName))
}

// State mocks base method.
func (m *MockIFxServices) State() State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockIFxServicesMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockIFxServices)(nil).State))
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStart(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStart(arg0).
		Do(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		OnStart(arg0).
		Return(ret0)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStartReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStop(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStop(arg0).
		Do(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		OnStop(arg0).
		Return(ret0)
}

// 1
func (mr *MockIFxServicesMockRecorder) OnOnStopReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [string]
// retString: string
// retString:  string
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIFxServicesMockRecorder) OnServiceNameDoAndReturn(
	f func() string) *gomock.Call {
	return mr.
		ServiceName().
		DoAndReturn(f)
}

// 0
func (mr *MockIFxServicesMockRecorder) OnServiceNameDo(
	f func()) *gomock.Call {
	return mr.
		ServiceName().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 string]
// retArgs22: ret0 string
// 1
func (mr *MockIFxServicesMockRecorder) OnServiceNameReturn(ret0 string) *gomock.Call {
	return mr.
		ServiceName().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [State]
// retString: State
// retString:  State
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIFxServicesMockRecorder) OnStateDoAndReturn(
	f func() State) *gomock.Call {
	return mr.
		State().
		DoAndReturn(f)
}

// 0
func (mr *MockIFxServicesMockRecorder) OnStateDo(
	f func()) *gomock.Call {
	return mr.
		State().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 State]
// retArgs22: ret0 State
// 1
func (mr *MockIFxServicesMockRecorder) OnStateReturn(ret0 State) *gomock.Call {
	return mr.
		State().
		Return(ret0)
}
